defaults: &defaults
  docker:
    - image: circleci/node:17-browsers
  working_directory: ~/origin

# Node.js and postgres container
db: &db
  docker:
    - image: circleci/node:17-browsers
    - image: circleci/postgres:12.1-alpine-ram
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: circle_ci_test
  working_directory: ~/origin
  environment:
    DATABASE_URL: postgres://postgres@localhost/circle_ci_test

# Node.js and redis container
redis: &redis
  docker:
    - image: circleci/node:17-browsers
    - image: circleci/redis:6
  working_directory: ~/origin

# Node.js, postgres and redis container
dbandredis: &dbandredis
  docker:
    - image: circleci/node:17-browsers
    - image: circleci/redis:6
    - image: circleci/postgres:12.1-alpine-ram
      environment:
        POSTGRES_USER: postgres
        POSTGRES_DB: circle_ci_test
  working_directory: ~/origin
  environment:
    DATABASE_URL: postgres://postgres@localhost/circle_ci_test

version: 2
jobs:
  Setup:
    <<: *defaults
    steps:
      - checkout
      - run:
          name: Yarn Install
          command: |
            yarn install --frozen-lockfile
            curl -sfL https://install.goreleaser.com/github.com/tj/node-prune.sh | sh
            ./bin/node-prune
      - run:
          name: Install Mobile Deps
          command: |
            cd mobile
            yarn install --frozen-lockfile --ignore-scripts
            curl -sfL https://install.goreleaser.com/github.com/tj/node-prune.sh | sh
            ./bin/node-prune

      - persist_to_workspace:
          root: .
          paths:
            - .
  Lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run: yarn lint && npm run lint --prefix mobile

  Marketplace:
    <<: *defaults
    parallelism: 4
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Marketplace Tests
          command: |
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then cd dapps/marketplace && NODE_ENV=test ./node_modules/.bin/mocha -r @babel/register test --bail -g "^Marketplace Dapp\." ; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then cd dapps/marketplace && NODE_ENV=test ./node_modules/.bin/mocha -r @babel/register test --bail -g "^Marketplace Dapp with proxies\." ; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then cd dapps/marketplace && NODE_ENV=test ./node_modules/.bin/mocha -r @babel/register test --bail -g "^Marketplace Dapp with proxies, performance mode, relayer\." ; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then cd dapps/marketplace && NODE_ENV=test ./node_modules/.bin/mocha -r @babel/register test --bail -g "^Marketplace Dapp with proxies, performance mode, broken relayer\." ; fi

  GraphQL:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run GraphQL Tests
          command: cd packages/graphql && yarn test

  GraphQLEngineSchemaCheck:
    <<: *defaults
    working_directory: ~/origin
    steps:
      - attach_workspace:
          at: .
      - run: sudo npm install -g apollo
      - run:
          name: Starting server
          command: npm run start --prefix packages/graphql
          background: true
      - run: sleep 10
      - run: apollo service:check --endpoint=http://localhost:4007/

  GraphQLEngineSchemaUpload:
    <<: *defaults
    working_directory: ~/origin
    steps:
      - attach_workspace:
          at: .
      - run: sudo npm install -g apollo
      - run:
          name: Starting server
          command: npm run start --prefix packages/graphql
          background: true
      - run: sleep 5
      - run: apollo service:push --tag=master --endpoint=http://localhost:4007

  EventCache:
    <<: *db
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run EventCache Tests
          command: cd packages/event-cache && yarn migrate && yarn test

  Bridge:
    <<: *dbandredis
    steps:
      - attach_workspace:
          at: .
      - run: cd packages/auth-utils && yarn migrate
      - run: cd infra/identity && yarn migrate
      - run: cd infra/growth-shared && yarn migrate
      - run:
          name: Run Bridge Tests
          command: cd infra/bridge && yarn migrate && yarn test

  Contracts:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Contract Tests
          command: cd packages/contracts && yarn test

  Discovery:
    docker:
      - image: circleci/node:17-browsers
      - image: circleci/redis:6
      - image: circleci/postgres:12.1-alpine-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: circle_ci_test
    working_directory: ~/origin
    environment:
      DATABASE_URL: postgres://postgres@localhost/circle_ci_test
    steps:
      - attach_workspace:
          at: .
      - run: cd infra/bridge && yarn migrate
      - run: cd infra/discovery && yarn migrate
      - run: cd infra/growth && yarn migrate
      - run: cd infra/growth-shared && yarn migrate
      - run: cd infra/identity && yarn migrate
      - run:
          name: Run Discovery Tests
          command: cd infra/discovery && yarn test

  Growth:
    <<: *db
    steps:
      - attach_workspace:
          at: .
      - run: cd infra/growth && yarn migrate
      - run: cd infra/growth-shared && yarn migrate
      - run: cd infra/identity && yarn migrate
      - run: cd infra/discovery && yarn migrate
      - run:
          name: Run Growth Tests
          command: cd infra/growth && yarn test

  Notifications:
    <<: *dbandredis
    steps:
      - attach_workspace:
          at: .
      - run: cd infra/growth && yarn migrate
      - run: cd infra/growth-shared && yarn migrate
      - run: cd infra/identity && yarn migrate
      - run: cd packages/auth-utils && yarn migrate
      - run:
          name: Run Notification Tests
          command: cd infra/notifications && yarn migrate && yarn test

  Relayer:
    <<: *redis
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Relayer Tests
          command: cd infra/relayer && yarn test

  T3:
    <<: *db
    steps:
      - attach_workspace:
          at: .
      - run: cd infra/token-transfer-server && yarn migrate
      - run:
          name: Run T3 Tests
          command: cd infra/token-transfer-server && yarn test
    environment:
      DATABASE_URL: postgres://postgres@localhost/circle_ci_test
      ENCRYPTION_SECRET: thisisasecret

  Web3Provider:
    <<: *defaults
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run web3-provider Tests
          command: cd packages/web3-provider && yarn test

  Messaging:
    <<: *dbandredis
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Starting Ganache
          command: cd packages/services && node start.js -g
          background: true
      - run:
          name: Run Messaging Server Tests
          command: cd infra/messaging && yarn migrate && yarn test

  AuthUtils:
    <<: *db
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Auth Utils Tests
          command: cd packages/auth-utils && yarn migrate && yarn test

  AuthServer:
    <<: *dbandredis
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Run Origin Auth Server Tests
          command: cd packages/auth-utils && yarn migrate && yarn test

  Builds:
    docker:
      - image: circleci/node:17-buster
    working_directory: ~/origin
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Run build Tests
          command: bash .circleci/docker_test_builds.sh

workflows:
  version: 2
  test:
    jobs:
      - Setup
      - Marketplace:
          requires:
            - Setup
      - Lint:
          requires:
            - Setup
      - GraphQL:
          requires:
            - Setup
      - EventCache:
          requires:
            - Setup
      - Bridge:
          requires:
            - Setup
      - Contracts:
          requires:
            - Setup
      - Discovery:
          requires:
            - Setup
      - Growth:
          requires:
            - Setup
      - Notifications:
          requires:
            - Setup
      - Relayer:
          requires:
            - Setup
      - T3:
          requires:
            - Setup
      - Web3Provider:
          requires:
            - Setup
      - Messaging:
          requires:
            - Setup
      - AuthUtils:
          requires:
            - Setup
      - AuthServer:
          requires:
            - Setup
      - Builds:
          requires:
            - Setup
          context: origin
  # Requires Apollo Engine subscription
  # schema:
  #   jobs:
  #     - Setup
  #     - GraphQLEngineSchemaCheck:
  #         requires:
  #           - Setup
  #         context: origin
  #     - GraphQLEngineSchemaUpload:
  #         requires:
  #           - Setup
  #         filters:
  #           branches:
  #             only:
  #               - master
  #         context: origin
